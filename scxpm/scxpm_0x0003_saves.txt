#if defined _scxpm_saves_included
    #endinput
#endif
#define _scxpm_saves_included

// Constantes para guardado
#define SAVE_INTERVAL 180.0
#define VAULT_NAME "scxpm_playerdata"

// Variables locales del m√≥dulo
new g_vault;

public SCXPM_Save_Init()
{
    // Inicializar vault
    g_vault = nvault_open(VAULT_NAME);
    
    if(g_vault == INVALID_HANDLE)
    {
        log_amx("[SCXPM] Error al abrir el vault");
        return PLUGIN_HANDLED;
    }
    
    // Purgar datos antiguos
    nvault_prune(g_vault, 0, get_systime() - (86400 * 30));
    
    return PLUGIN_CONTINUE;
}

public SCXPM_PlayerLoad(id)
{
    if(!is_user_connected(id))
        return PLUGIN_HANDLED;
        
    new authid[35];
    get_user_authid(id, authid, charsmax(authid));
    
    new data[256];
    if(nvault_get(g_vault, authid, data, charsmax(data)))
    {
        new level[12], xp[12], skill_points[12], medals[12];
        parse(data, level, charsmax(level),
                    xp, charsmax(xp),
                    skill_points, charsmax(skill_points),
                    medals, charsmax(medals));
                    
        g_iLevel[id] = str_to_num(level);
        g_iXP[id] = str_to_num(xp);
        g_iSkillPoints[id] = str_to_num(skill_points);
        g_iMedals[id] = str_to_num(medals);
        
        g_bLoaded[id] = true;
    }
    else
    {
        // Datos por defecto para nuevo jugador
        g_iLevel[id] = 1;
        g_iXP[id] = 0;
        g_iSkillPoints[id] = 0;
        g_iMedals[id] = 0;
        g_bLoaded[id] = true;
    }
    
    return PLUGIN_CONTINUE;
}

public SCXPM_PlayerSave(id)
{
    if(!is_user_connected(id) || !g_bLoaded[id])
        return PLUGIN_HANDLED;
        
    new authid[35];
    get_user_authid(id, authid, charsmax(authid));
    
    new data[256];
    formatex(data, charsmax(data), "%d %d %d %d",
        g_iLevel[id],
        g_iXP[id],
        g_iSkillPoints[id],
        g_iMedals[id]);
        
    nvault_set(g_vault, authid, data);
    
    return PLUGIN_CONTINUE;
}