#if defined _scxpm_settings_included
    #endinput
#endif
#define _scxpm_settings_included

// Definiciones de configuración
#define MAX_PLAYERS 32
#define MAX_SKILL_LEVEL 50
#define MAX_PLAYER_LEVEL 1800
#define DEFAULT_XP_MULTIPLIER 1.0

// Variables locales del módulo
new g_pcvar_GameName;
new g_pcvar_MinPlayTime;
new g_pcvar_HUDChannel;
new g_pcvar_SaveFrequent;
new g_pcvar_XPGain;
new g_pcvar_MaxLevel;

public SCXPM_Settings_Init()
{
    // Registrar CVars
    g_pcvar_GameName = register_cvar("scxpm_gamename", "1");
    g_pcvar_MinPlayTime = register_cvar("scxpm_minplaytime", "0");
    g_pcvar_HUDChannel = register_cvar("scxpm_hud_channel", "3");
    g_pcvar_SaveFrequent = register_cvar("scxpm_save_frequent", "1");
    g_pcvar_XPGain = register_cvar("scxpm_xpgain", "1.0");
    g_pcvar_MaxLevel = register_cvar("scxpm_maxlevel", "1800");
    
    // Configurar nombre del juego
    formatex(g_GameName, charsmax(g_GameName), "SCXPM v%s", VERSION);
    
    return PLUGIN_CONTINUE;
}

// Funciones de utilidad para settings
stock get_scxpm_setting(const setting[])
{
    new cvar = get_cvar_pointer(setting);
    return (cvar) ? get_pcvar_num(cvar) : 0;
}

stock Float:get_scxpm_setting_float(const setting[])
{
    new cvar = get_cvar_pointer(setting);
    return (cvar) ? get_pcvar_float(cvar) : 0.0;
}

stock bool:is_save_enabled()
{
    return get_pcvar_num(g_pcvar_SaveFrequent) ? true : false;
}

stock Float:get_xp_multiplier()
{
    return get_pcvar_float(g_pcvar_XPGain);
}