#if defined _scxpm_events_included
    #endinput
#endif
#define _scxpm_events_included

// Constantes de eventos
#define XP_KILL 100
#define XP_HEADSHOT 50
#define XP_DAMAGE 10

// Variables locales del módulo
new g_iLastDamage[33];
new g_iLastAttacker[33];

public SCXPM_Events_Init()
{
    // Registrar eventos
    register_event("DeathMsg", "SCXPM_PlayerKilled", "a");
    register_event("Damage", "SCXPM_PlayerDamage", "b", "2!0", "3=0", "4!0");
    register_event("ResetHUD", "SCXPM_ResetHud", "be");
    
    return PLUGIN_CONTINUE;
}

public SCXPM_PlayerKilled(killer, victim, headshot)
{
    if(!is_user_connected(killer) || !is_user_connected(victim) || killer == victim)
        return PLUGIN_HANDLED;
        
    if(!g_bLoaded[killer])
        return PLUGIN_HANDLED;
        
    // Calcular XP base
    new xp = XP_KILL;
    
    // Bonus por headshot
    if(headshot)
        xp += XP_HEADSHOT;
        
    // Multiplicador VIP
    if(g_bIsVIP[killer])
        xp *= 2;
        
    // Dar XP y verificar nivel
    g_iXP[killer] += xp;
    SCXPM_CheckLevel(killer);
    
    return PLUGIN_CONTINUE;
}

public SCXPM_PlayerDamage(victim, attacker, damage, type)
{
    if(!is_user_connected(victim) || !is_user_connected(attacker) || victim == attacker)
        return PLUGIN_HANDLED;
        
    if(!g_bLoaded[attacker])
        return PLUGIN_HANDLED;
        
    // Guardar último daño y atacante
    g_iLastDamage[victim] = damage;
    g_iLastAttacker[victim] = attacker;
    
    // XP por daño
    new xp = damage / XP_DAMAGE;
    
    if(g_bIsVIP[attacker])
        xp *= 2;
        
    g_iXP[attacker] += xp;
    SCXPM_CheckLevel(attacker);
    
    return PLUGIN_CONTINUE;
}

public SCXPM_ResetHud(id)
{
    if(!is_user_connected(id) || !g_bLoaded[id])
        return PLUGIN_HANDLED;
        
    // Resetear valores
    g_iLastDamage[id] = 0;
    g_iLastAttacker[id] = 0;
    
    // Aplicar habilidades
    SCXPM_ApplySkills(id);
    
    return PLUGIN_CONTINUE;
}

// Función auxiliar para verificar nivel
SCXPM_CheckLevel(id)
{
    new next_level = g_iLevel[id] + 1;
    new needed_xp = next_level * 500;
    
    if(g_iXP[id] >= needed_xp)
    {
        g_iLevel[id] = next_level;
        g_iXP[id] -= needed_xp;
        g_iSkillPoints[id]++;
        
        // Mensaje de nivel
        client_print(id, print_chat, "[SCXPM] ¡Subiste al nivel %d! Tienes %d puntos de habilidad.", g_iLevel[id], g_iSkillPoints[id]);
    }
}