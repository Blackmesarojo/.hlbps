#include <amxmodx>
#include <amxmisc>
#include <engine>
#include <core>
#include <fakemeta>
#include <xp_misc>
#include <xp_weapon>
#include <xp_monster>
#include <hamsandwich>
#include <xp_string>
#include <fun>
#define VERSION "1.0"
enum
{
	Attrib_NoReload = (1<<0)
}
enum
{
	GodModeMenu = 0,
	NoclipModeMenu,
	NotargetModeMenu,
	ParaliyzeModeMenu,
	NoReloadModeMenu
}
new PlayerAttrib[33];
new LastPlayerAmmunition[33][2];
public plugin_init()
{
	register_plugin("SCXP Fun", VERSION, "Ibm")
	register_dictionary("scxp_fun.txt");
	register_concmd("xp_ent_setupfriend", "xp_setupfriend", ADMIN_IMMUNITY, "<value> - Make target enemy or friend ");
	register_concmd("xp_ent_sethealth", "xp_sethealth", ADMIN_IMMUNITY, "<value> - Set target health");
	register_clcmd("xp_menu_godmode", "xp_menu_godmode", ADMIN_MENU, "- open Godmode menu")
	register_clcmd("xp_menu_noclipmode", "xp_menu_noclipmode", ADMIN_MENU, "- open Noclip menu")
	register_clcmd("xp_menu_notargetmode", "xp_menu_notargetmode", ADMIN_MENU, "- open Notarget mod menu")
	register_clcmd("xp_menu_paraliyze", "xp_menu_paraliyze", ADMIN_MENU, "- Open paraliyze mode menu") 
	register_clcmd("xp_menu_noreload", "xp_menu_noreload", ADMIN_MENU, "- Open NoReload mode menu")
	register_concmd("xp_godmode","xp_godmode",ADMIN_IMMUNITY,"<Player> - toggle user godmode enabled or disabled")
	register_concmd("xp_paraliyze","xp_paraliyze",ADMIN_IMMUNITY,"<Player> - toggle user paraliyze enabled or disabled")
	register_concmd("xp_notargetmode","xp_notarget",ADMIN_IMMUNITY,"<Player> - toggle user notarget enabled or disabled")
	register_concmd("xp_noclipmode","xp_noclipmode",ADMIN_IMMUNITY,"<Player> - toggle user noclip enabled or disabled")
	register_concmd("xp_noreload","xp_noreload",ADMIN_IMMUNITY,"<Player> - toggle user norolad enabled or disabled")
	register_cvar("xp_admin_showactionmessage", "1");
	for(new i = 1;i < 29;i++)
	{
		new WeaponName[40] 
		get_weaponname(i, WeaponName, 39);
		if(strlen(WeaponName) <= 0) continue;
		RegisterHam(Ham_Weapon_IsUsable, WeaponName, "PreWeaponAttack", 0);
		RegisterHam(Ham_Weapon_PrimaryAttack, WeaponName, "PreWeaponAttack", 0);
		RegisterHam(Ham_Weapon_IsUsable, WeaponName, "WeaponAttack", 1);
		RegisterHam(Ham_Weapon_PrimaryAttack, WeaponName, "WeaponAttack", 1);
	}
}
public PreWeaponAttack(id)
{
	WeaponAmmoReadWrite(id, false);
	return HAM_IGNORED;
}
public WeaponAttack(id)
{
	WeaponAmmoReadWrite(id, true);
	return HAM_IGNORED;
}
public WeaponAmmoReadWrite(id, bool:WriteData)
{
	new userid = pev(id, pev_owner);
	new CurrentWeaponId = get_user_weapon(userid);
	if(userid <= 0 || userid > 32) return;
	new AmmoClip = LastPlayerAmmunition[userid][0];
	if(WriteData && !get_player_flagsEx(userid, Attrib_NoReload)) return;
	if(get_weapon_data(CurrentWeaponId, IS_WEAPON) > 0)
	{
		if(WriteData && get_weapon_data(CurrentWeaponId, IS_WEAPON) == 2)
		{
			set_pdata_int(userid, get_weapon_data(CurrentWeaponId, AMMO_OFFSET), get_weapon_data(CurrentWeaponId, MAX_CLIP_AMMO));
			return;
		}
		if(get_weapon_data(CurrentWeaponId, CLIP_COUNT) > 1)
		{	
			if(WriteData)
			{
				if(CurrentWeaponId == SCW_M16)
				{
					set_pdata_int(id, OFFSET_AMMO_CLIP1, get_weapon_data(SCW_M16, MAX_CLIP_AMMO));
				}
				else
				{
					set_pdata_int(id, OFFSET_AMMO_CLIP1, AmmoClip);
				}
			}
			else
			{
				AmmoClip = get_pdata_int(id, OFFSET_AMMO_CLIP1);
			}
			switch(CurrentWeaponId)
			{
				case SCW_UZIAKIMBO:
				{
					new ent_uzi = find_ent_by_owner(-1,"weapon_uzi", userid, 0);
					if(WriteData) 
					{
						set_pdata_int(ent_uzi, OFFSET_AMMO_CLIP1, LastPlayerAmmunition[userid][1]);
					}
					else
					{
						LastPlayerAmmunition[userid][1] = get_pdata_int(ent_uzi, OFFSET_AMMO_CLIP1);
					}
				}
				case SCW_M16:
				{
					if(WriteData)
					{
						 set_pdata_int(userid, get_weapon_data(SCW_M203, AMMO_OFFSET), LastPlayerAmmunition[userid][1]);
						 set_pdata_int(id, OFFSET_AMMO_CLIP2, 1);
					}
					else
					{
						LastPlayerAmmunition[userid][1] = get_pdata_int(userid, get_weapon_data(SCW_M203, AMMO_OFFSET));
					}
				}
			}
		}
		else if(get_weapon_data(CurrentWeaponId, CLIP_COUNT)== 1)
		{
			if(WriteData)
			{
				set_pdata_int(userid, WeaponList[CurrentWeaponId][AMMO_OFFSET], AmmoClip);
			}
			else
			{
				AmmoClip = get_pdata_int(userid, get_weapon_data(CurrentWeaponId, AMMO_OFFSET));
			}
		}
	}
	if(!WriteData) LastPlayerAmmunition[userid][0] = AmmoClip;
}
public SendServerError()
{
	server_print("%s%L", prefix, LANG_SERVER, "XP_CMD_ERROR_SERVER");
}
public xp_setupfriend(id, level, cid)
{
	//Added 1.2: 04.03.2014
	if(!id)
	{
		SendServerError();
		return PLUGIN_HANDLED;
	}
	//
	if(!cmd_access(id,level,cid,2))
	{
		return PLUGIN_HANDLED;
	}
	if(!id)
	{
		return PLUGIN_HANDLED;
	}
	new ValueArg[2];
	read_argv(1,ValueArg,1);
	new ValueA = str_to_num(ValueArg);
	new target, body;
	get_user_aiming(id, target, body);
	if(ValueA == 0)
	{
		xp_setupfrientattrib(target, false);
	}
	else if(ValueA == 1)
	{
		xp_setupfrientattrib(target, true);
	}
	else
	{
		if(target > 32)
		{
			if(isMonsterAlly(target))
			{
				xp_setupfrientattrib(target, false);
			}
			else
			{
				xp_setupfrientattrib(target, true);
			}
		}
	}
	new Uname[40]
	get_user_name(id, Uname, 39)
	log_amx("%s%s now Use %s %i to %i command", prefix, Uname, "xp_ent_setupfriend", ValueA, target);
	return PLUGIN_HANDLED;
}
public xp_setupfrientattrib(target, bool:Ally)
{
	if(target)
	{
		new entclass[32];
		pev(target, pev_classname, entclass, sizeof entclass - 1)
		if(strfind (entclass,"monster") > -1) 
		{
			set_pdata_int(target, OFFSET_MONSTER_ALLY, Ally);
		}
	}
	return PLUGIN_HANDLED;
}
public xp_sethealth(id, level, cid)
{
	//Added 1.2: 04.03.2014
	if(!id)
	{
		SendServerError();
		return PLUGIN_HANDLED;
	}
	//
	if(!cmd_access(id,level,cid,2))
	{
		return PLUGIN_HANDLED;
	}
	if(!id)
	{
		return PLUGIN_HANDLED;
	}
	new body, target;
	new ValueArg[8];
	read_argv(1,ValueArg, 7);
	new Float:ValueA = str_to_float(ValueArg);
	get_user_aiming(id, target, body);
	if(target)
	{
		if(ValueA <= 0)
		{
			set_pev(target, pev_health, 1.0);
			ExecuteHam(Ham_TakeDamage, target, 0, id, 20.0, ( 1 << 12 ));
		}
		else
		{	
			set_pev(target, pev_health, ValueA);
		}
		
	}
	new Uname[40]
	get_user_name(id, Uname, 39)
	log_amx("%s%s now Use %s %f to %i command", prefix, Uname, "xp_ent_sethealth", ValueA, target);
	return PLUGIN_HANDLED;
}

public bool:check_user_var(sender, target)
{
	if(target > 32 && target < 1) return false;
	if(sender > 32 && sender < 1) return false;
	new playername[32]
	get_user_name(target, playername, 31)
	if(!is_user_alive(target))
	{
		client_print(sender, print_chat, "%s%L", prefix, sender, "XP_ERROR_NOTALIVE", playername);
		return false;
	}
	return true;
}
public xp_menu_godmode(id, level, cid)
{
	//Added 1.2: 04.04.2014
	if(!id)
	{
		SendServerError();
		return PLUGIN_HANDLED;
	}
	//
	if(!cmd_access(id,level,cid,1))
	{
		return PLUGIN_HANDLED
	}
	ShowPlayerMenu(id, 0, GodModeMenu);
	return PLUGIN_HANDLED;
}
public xp_menu_noclipmode(id, level, cid)
{
	//Added 1.2: 04.04.2014
	if(!id)
	{
		SendServerError();
		return PLUGIN_HANDLED;
	}
	//
	if(!cmd_access(id,level,cid,1))
	{
		return PLUGIN_HANDLED
	}
	ShowPlayerMenu(id, 0, NoclipModeMenu);
	return PLUGIN_HANDLED;
}
public xp_menu_notargetmode(id, level, cid)
{
	//Added 1.2: 04.04.2014
	if(!id)
	{
		SendServerError();
		return PLUGIN_HANDLED;
	}
	//
	if(!cmd_access(id,level,cid,1))
	{
		return PLUGIN_HANDLED
	}
	ShowPlayerMenu(id, 0, NotargetModeMenu);
	return PLUGIN_HANDLED;
}
public xp_menu_paraliyze(id, level, cid)
{
	//Added 1.2: 04.04.2014
	if(!id)
	{
		SendServerError();
		return PLUGIN_HANDLED;
	}
	//
	if(!cmd_access(id,level,cid,1))
	{
		return PLUGIN_HANDLED
	}
	ShowPlayerMenu(id, 0, ParaliyzeModeMenu);
	return PLUGIN_HANDLED;
}
public xp_menu_noreload(id, level, cid)
{
	//Added 1.2: 04.04.2014
	if(!id)
	{
		SendServerError();
		return PLUGIN_HANDLED;
	}
	//
	if(!cmd_access(id,level,cid,1))
	{
		return PLUGIN_HANDLED
	}
	ShowPlayerMenu(id, 0, NoReloadModeMenu);
	return PLUGIN_HANDLED;
}
public xp_noreload(id, level, cid)
{
	if(!cmd_access(id,level,cid,2))
	{
		return PLUGIN_HANDLED
	}
	new noreload_arg[32]
	read_argv(1,noreload_arg,31)
	new noreload_target = cmd_target(id,noreload_arg,4)
	if(noreload_target)
	{
		set_user_noreloadEx(id, noreload_target, true, true, false);
	}
	else
	{
		console_print(id, "%s%L", prefix, id, "XP_CMD_ERROR_NF", noreload_arg);
	}
	return PLUGIN_HANDLED
}
public xp_godmode(id,level,cid)
{
	if(!cmd_access(id,level,cid,2))
	{
		return PLUGIN_HANDLED
	}
	new godmode_arg[32]
	read_argv(1,godmode_arg,31)
	new godmode_target=cmd_target(id,godmode_arg,4)
	if(godmode_target)
	{
		set_user_godmodeEx(id, godmode_target, true, true, false);
	}
	else
	{
		console_print(id, "%s%L", prefix, id, "XP_CMD_ERROR_NF", godmode_arg);
	}
	return PLUGIN_HANDLED
}
public xp_noclipmode(id,level,cid)
{
	if(!cmd_access(id,level,cid,2))
	{
		return PLUGIN_HANDLED
	}
	new noclipmode_arg[32]
	read_argv(1,noclipmode_arg,31)
	new noclipmode_target=cmd_target(id, noclipmode_arg, 4)
	if(noclipmode_target)
	{
		set_user_noclipmode(id, noclipmode_target, true, true, false);
	}
	else
	{
		console_print(id, "%s%L", prefix, id, "XP_CMD_ERROR_NF", noclipmode_arg);
	}
	return PLUGIN_HANDLED
}
public xp_paraliyze(id, level, cid)
{
	if(!cmd_access(id,level,cid,2))
	{
		return PLUGIN_HANDLED;
	}
	new paraliyze_arg[32]
	read_argv(1,paraliyze_arg, 31);
	new player_n = cmd_target(id,paraliyze_arg, 4);
	if(!player_n)
	{ 
		console_print(id,  "%s%L", prefix, id, "XP_CMD_ERROR_NF", paraliyze_arg);
		return PLUGIN_HANDLED;
	}
	set_user_paraliyzeEx(id, player_n, true, true, false);
	return PLUGIN_HANDLED;
}
public xp_notarget(id, level, cid)
{
	if(!cmd_access(id,level,cid,2))
	{
		return PLUGIN_HANDLED;
	}
	new notarget_arg[32]
	read_argv(1,notarget_arg, 31);
	new player_n = cmd_target(id,notarget_arg, 4);
	if(!player_n)
	{
		console_print(id, "%s%L", prefix, id, "XP_CMD_ERROR_NF", notarget_arg);
		return PLUGIN_HANDLED;
	}
	set_user_notarget(id, player_n, true, true, false);
	return PLUGIN_HANDLED;
}
stock set_user_godmodeEx(sender, target, bool:msgtouser, bool:msgtoconsole, bool:msgme)
{
	if(!check_user_var(sender, target)) return 0;
	new playername[32];
	get_user_name(target, playername, 31);	
	if(get_user_godmode(target))
	{
		if(target == sender)
		{
			if(msgtoconsole) console_print(sender, "%s%L", prefix, sender, "XP_GOD_DIS_SELF");
			if(msgme) client_print(sender, print_chat, "%s%L", prefix, sender, "XP_GOD_DIS_SELF");
			SendClientMessage(sender, target, "XP_GOD_DIS_ALL", true, 0);
		}
		else
		{
			if(msgtoconsole) console_print(sender, "%s%L", prefix, sender, "XP_GOD_DIS_CON", playername);
			if(msgtouser) client_print(target, print_chat, "%s%L", prefix, target, "XP_GOD_DIS_USER");
			SendClientMessage(sender, target, "XP_GOD_DIS_ALL", true, 0);

		}
		set_user_godmode(target, 0);
		return 1;
	}
	else
	{
		if(target == sender)
		{
			if(msgtoconsole) console_print(sender, "%s%L", prefix, sender, "XP_GOD_ON_SELF");
			if(msgme) client_print(sender, print_chat, "%s%L", prefix, sender, "XP_GOD_ON_SELF");
			SendClientMessage(sender, target, "XP_GOD_ON_ALL", true, 0);
		}
		else
		{
			if(msgtoconsole) console_print(sender, "%s%L", prefix, sender, "XP_GOD_ON_CON", playername);
			if(msgtouser) client_print(target, print_chat, "%s%L", prefix, target, "XP_GOD_ON_USER");
			SendClientMessage(sender, target, "XP_GOD_ON_ALL", true, 0);
		}
		set_user_godmode(target, 1);
		return 1;
	}
	return 0;
}
stock set_user_paraliyzeEx(sender, target, bool:msgtouser, bool:msgtoconsole, bool:msgme)
{
	if(!check_user_var(sender, target)) return 0;
	new playername[32];
	get_user_name(target, playername, 31);
	if(get_entity_flagsEx(target, FL_FROZEN))
	{
		if(target == sender)
		{
			if(msgtoconsole) console_print(sender, "%s%L", prefix, sender, "XP_PAR_DIS_SELF");
			if(msgme) client_print(sender, print_chat, "%s%L", prefix, sender, "XP_PAR_DIS_SELF");
			SendClientMessage(sender, target, "XP_PAR_DIS_ALL", true, 0);
		}
		else
		{
			if(msgtoconsole) console_print(sender, "%s%L", prefix, sender, "XP_PAR_DIS_CON", playername);
			if(msgtouser) client_print(target, print_chat, "%s%L", prefix, target, "XP_PAR_DIS_USER");
			SendClientMessage(sender, target, "XP_PAR_DIS_ALL", true, 0);
		}
		set_entity_flags(target, FL_FROZEN, 0);
		return 1;
	}
	else
	{
		if(target == sender)
		{
			if(msgtoconsole) console_print(sender, "%s%L", prefix, sender, "XP_PAR_ON_SELF");
			if(msgme) client_print(sender, print_chat, "%s%L", prefix, sender, "XP_PAR_ON_SELF");
			SendClientMessage(sender, target, "XP_PAR_ON_ALL", true, 0);
		}
		else
		{
			if(msgtoconsole) console_print(sender, "%s%L", prefix, sender, "XP_PAR_ON_CON", playername);
			if(msgtouser) client_print(target, print_chat, "%s%L", prefix, target, "XP_PAR_ON_USER");
			SendClientMessage(sender, target, "XP_PAR_ON_ALL", true, 0);
		}
		set_entity_flags(target, FL_FROZEN, 1);
		return 1;
	}
	return 0;
	
}
stock set_user_noclipmode(sender, target, bool:msgtouser, bool:msgtoconsole, bool:msgme)
{
	if(!check_user_var(sender, target)) return 0;
	new playername[32];
	get_user_name(target, playername, 31);	
	if(get_user_noclip(target))
	{
		if(target == sender)
		{
			if(msgtoconsole) console_print(sender, "%s%L", prefix, sender, "XP_NOCLIP_DIS_SELF");
			if(msgme) client_print(sender, print_chat, "%s%L", prefix, sender, "XP_NOCLIP_DIS_SELF");
			SendClientMessage(sender, target, "XP_NOCLIP_DIS_ALL", true, 0);
		}
		else
		{
			if(msgtoconsole) console_print(sender, "%s%L", prefix, sender, "XP_NOCLIP_DIS_CON", playername);
			if(msgtouser) client_print(target, print_chat, "%s%L", prefix, target, "XP_NOCLIP_DIS_USER");
			SendClientMessage(sender, target, "XP_NOCLIP_DIS_ALL", true, 0);
		}
		set_user_noclip(target, 0);
		return 1;
	}
	else
	{
		if(target == sender)
		{
			if(msgtoconsole) console_print(sender, "%s%L", prefix, sender, "XP_NOCLIP_ON_SELF");
			if(msgme) client_print(sender, print_chat, "%s%L", prefix, sender, "XP_NOCLIP_ON_SELF");
			SendClientMessage(sender, target, "XP_NOCLIP_ON_ALL", true, 0);
		}
		else
		{
			if(msgtoconsole) console_print(sender, "%s%L", prefix, sender, "XP_NOCLIP_ON_CON", playername);
			if(msgtouser) client_print(target, print_chat, "%s%L", prefix, target, "XP_NOCLIP_ON_USER");
			SendClientMessage(sender, target, "XP_NOCLIP_ON_ALL", true, 0);
		}
		set_user_noclip(target, 1);
		return 1;
	}
	return 0;
}
stock set_user_notarget(sender, target, bool:msgtouser, bool:msgtoconsole, bool:msgme)
{
	if(!check_user_var(sender, target)) return 0;
	new playername[32];
	get_user_name(target, playername, 31);
	if(get_entity_flagsEx(target, FL_NOTARGET))
	{
		if(target == sender)
		{
			if(msgtoconsole) console_print(sender, "%s%L", prefix, sender, "XP_NOTARGET_DIS_SELF");
			if(msgme) client_print(sender, print_chat, "%s%L", prefix, sender, "XP_NOTARGET_DIS_SELF");
			SendClientMessage(sender, target, "XP_NOTARGET_DIS_ALL", true, 0);
		}
		else
		{
			if(msgtoconsole) console_print(sender, "%s%L", prefix, sender, "XP_NOTARGET_DIS_CON", playername);
			if(msgtouser) client_print(target, print_chat, "%s%L", prefix, target, "XP_NOTARGET_DIS_USER");
			SendClientMessage(sender, target, "XP_NOTARGET_DIS_ALL", true, 0);
		}
		set_entity_flags(target, FL_NOTARGET, 0);
		return 1;
	}
	else
	{
		if(target == sender)
		{
			if(msgtoconsole) console_print(sender, "%s%L", prefix, sender, "XP_NOTARGET_ON_SELF");
			if(msgme) client_print(sender, print_chat, "%s%L", prefix, sender, "XP_NOTARGET_ON_SELF");
			SendClientMessage(sender, target, "XP_NOTARGET_ON_ALL", true, 0);
		}
		else
		{
			if(msgtoconsole) console_print(sender, "%s%L", prefix, sender, "XP_NOTARGET_ON_CON", playername);
			if(msgtouser) client_print(target, print_chat, "%s%L", prefix, target, "XP_NOTARGET_ON_USER");
			SendClientMessage(sender, target, "XP_NOTARGET_ON_ALL", true, 0);
		}
		set_entity_flags(target, FL_NOTARGET, 1);
		return 1;
	}
	return 0;
}
public bool:get_player_flagsEx(id, flag)
{
	return ((PlayerAttrib[id] & flag == flag) ? true: false);
}
public bool:set_player_flagsEx(id, flag, bool:onoff)
{
	if(PlayerAttrib[id] & flag == flag)
	{
		if(!onoff)
		{
			PlayerAttrib[id] -= flag;
			return true;
		}
	}
	else
	{
		if(onoff)
		{
			PlayerAttrib[id] += flag;
			return true;
		}
	}
	return false;
}
stock set_user_noreloadEx(sender, target, bool:msgtouser, bool:msgtoconsole, bool:msgme)
{
	if(!check_user_var(sender, target)) return 0;
	new playername[32];
	get_user_name(target, playername, 31);	
	
	if(get_player_flagsEx(target, Attrib_NoReload))
	{
		if(target == sender)
		{
			if(msgtoconsole) console_print(sender, "%s%L", prefix, sender, "XP_NORELOAD_DIS_SELF");
			if(msgme) client_print(sender, print_chat, "%s%L", prefix, sender, "XP_NORELOAD_DIS_SELF");
			SendClientMessage(sender, target, "XP_NORELOAD_DIS_ALL", true, 0);
		}
		else
		{
			if(msgtoconsole) console_print(sender, "%s%L", prefix, sender, "XP_NORELOAD_DIS_CON", playername);
			if(msgtouser) client_print(target, print_chat, "%s%L", prefix, target, "XP_NORELOAD_DIS_USER");
			SendClientMessage(sender, target, "XP_NORELOAD_DIS_ALL", true, 0);
		}
		set_player_flagsEx(target, Attrib_NoReload, false);
		return 1;
	}
	else
	{
		if(target == sender)
		{
			if(msgtoconsole) console_print(sender, "%s%L", prefix, sender, "XP_NORELOAD_ON_SELF");
			if(msgme) client_print(sender, print_chat, "%s%L", prefix, sender, "XP_NORELOAD_ON_SELF");
			SendClientMessage(sender, target, "XP_NORELOAD_ON_ALL", true, 0);
		}
		else
		{
			if(msgtoconsole) console_print(sender, "%s%L", prefix, sender, "XP_NORELOAD_ON_CON", playername);
			if(msgtouser) client_print(target, print_chat, "%s%L", prefix, target, "XP_NORELOAD_ON_USER");
			SendClientMessage(sender, target, "XP_NORELOAD_ON_ALL", true, 0);
		}
		set_player_flagsEx(target, Attrib_NoReload, true);
		return 1;
	}
	return 0;
}
public SetUserAttrib(sender, target, type)
{
	switch(type)
	{
		case GodModeMenu:
		{
			set_user_godmodeEx(sender, target, true, false, true);
		}
		case NoclipModeMenu:
		{
			set_user_noclipmode(sender, target, true, false, true);
		}
		case NotargetModeMenu:
		{
			set_user_notarget(sender, target, true, false, true);
		}
		case ParaliyzeModeMenu:
		{
			set_user_paraliyzeEx(sender, target, true, false, true);
		}
		case NoReloadModeMenu:
		{
			set_user_noreloadEx(sender, target, true, false, true);
		}
	}
}

public ShowPlayerMenu(id, page, type)
{
	new Players[32]
	new playerCount, playerid
	new strl[8];
	new strc[50];
	get_players(Players, playerCount, "g")
	
	new HeaderMenu[60]
	switch(type)
	{
		case GodModeMenu:
		{
			format(HeaderMenu, 59, "%s%L", prefix, id, "XP_GODMENU_HEADER");
		}
		case NoclipModeMenu:
		{
			format(HeaderMenu, 59, "%s%L", prefix, id, "XP_NOCLIPMENU_HEADER")
		}
		case NotargetModeMenu:
		{
			format(HeaderMenu, 59, "%s%L", prefix, id, "XP_NOTARGETMENU_HEADER");
		}
		case ParaliyzeModeMenu:
		{
			format(HeaderMenu, 59, "%s%L", prefix, id, "XP_PARALIYZEMENU_HEADER");
		}
		case NoReloadModeMenu:
		{
			format(HeaderMenu, 59, "%s%L", prefix, id, "XP_NORELOADMENU_HEADER");
		}
	}
	new menu = menu_create( HeaderMenu, "PlayerMenuHandler" );
	for (new i=0; i< playerCount; i++)
	{
	   playerid = Players[i];
	   format(strl, 7, "%i|%i", type, playerid);
	   get_user_name(playerid, strc, 49);
	   if(GetUserAttrib(playerid, type))
	   {
			format(strc, 49, "\r%s%L", strc, id, "XP_ON");
	   }
	   else
	   {
			format(strc, 49, "\w%s", strc);
	   }
	   menu_additem( menu, strc, strl, 0, menu_makecallback("PlAttrbtModeCb"));
	}

	menu_display(id, menu, page);
}
public PlAttrbtModeCb(id, menu, item)
{
	new MenuInfo[5];
	new MenuEx[2][5];
	
	getMenuIndex_str(menu, item, MenuInfo, 4);
	ExplodeString( MenuEx, 2, 4, MenuInfo, '|')
	new UserId = str_to_num(MenuEx[1]);
	if(!is_user_alive(UserId))
	{
		return ITEM_DISABLED;
	}
	return ITEM_ENABLED;
}
public PlayerMenuHandler( id, menu, item )
{
	if(item == MENU_EXIT)
	{
		menu_destroy( menu );
		return PLUGIN_HANDLED;
	}
	new MenuInfo[7];
	new MenuEx[2][5];
	
	getMenuIndex_str(menu, item, MenuInfo, 6);
	ExplodeString( MenuEx, 2, 6, MenuInfo, '|')
	new TypeId = str_to_num(MenuEx[0]);
	new UserId = str_to_num(MenuEx[1]);
	if(UserId)
	{
		new SayfaC = item / 7;
		if(!is_user_connected(UserId) || !is_user_alive(UserId))
		{
			menu_destroy( menu );
			ShowPlayerMenu(id, SayfaC, TypeId);
			return PLUGIN_HANDLED;
		}
		SetUserAttrib(id, UserId, TypeId);
		menu_destroy( menu );
		ShowPlayerMenu(id, SayfaC, TypeId);
	}
	return PLUGIN_HANDLED;
}
public GetUserAttrib(id, type)
{
	switch(type)
	{
		case GodModeMenu:
		{
			return get_user_godmode(id);
		}
		case NoclipModeMenu:
		{
			return get_user_noclip(id);
		}
		case NotargetModeMenu:
		{
			return get_entity_flagsEx(id, FL_NOTARGET);
		}
		case ParaliyzeModeMenu:
		{
			return get_entity_flagsEx(id, FL_FROZEN);
		}
		case NoReloadModeMenu:
		{
			return get_player_flagsEx(id, Attrib_NoReload);
		}
	}
	return false;
}
public client_disconnect(id)
{
	PlayerAttrib[id] = 0;
}
/* AMXX-Studio Notes - DO NOT MODIFY BELOW HERE
*{\\ rtf1\\ ansi\\ deff0{\\ fonttbl{\\ f0\\ fnil Tahoma;}}\n\\ viewkind4\\ uc1\\ pard\\ lang1055\\ f0\\ fs16 \n\\ par }
*/
