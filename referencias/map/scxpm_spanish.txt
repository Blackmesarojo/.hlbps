#include <amxmodx>
#include <amxmisc>
#include <core>
#include <fakemeta>
#include <fun>

#define VERSION "17.31 Custom Final"
#define LASTUPDATE "17 Sept 2025"

new const VIP_FILE[] = "addons/amxmodx/configs/scxpm_vips.ini";
new bool:is_vip[33];

new bool:loaddata[33];
new bool:plugin_ended;
new load_error[33];
new xp[33];
new neededxp[33];
new playerlevel[33];
new rank[33][32];
new skillpoints[33];
new medals[35];
new health[33];
new armor[33];
new dist[33];
new rhealth[33];
new rarmor[33];
new rhealthwait[33];
new rarmorwait[33];
new starthealth;
new startarmor;
new lastfrags[33];
new lastDeadflag[33];
new skillIncrement[33];
new bool:onecount;
new bool:has_godmode[33];

public plugin_init()
{
	register_plugin("SCXPM Custom Final",VERSION,"Silicer/Gemini");
	register_menucmd(register_menuid("Select Skill"),(1<<0)|(1<<1)|(1<<2)|(1<<3)|(1<<4)|(1<<9),"SCXPMSkillChoice");
	register_menucmd(register_menuid("Select Increment"),(1<<0)|(1<<1)|(1<<2)|(1<<3)|(1<<4)|(1<<5),"SCXPMIncrementChoice");
	register_forward(FM_GetGameDescription,"scxpm_gn");
	register_forward(FM_PlayerPreThink,"scxpm_prethink");
	register_concmd("setlvl","scxpm_setlvl",ADMIN_IMMUNITY,"Nombre Valor - Establece el nivel de un jugador");
	register_concmd("addmedal","scxpm_addmedal",ADMIN_IMMUNITY,"Nombre - Otorga una medalla a un jugador");
	register_concmd("removemedal","scxpm_removemedal",ADMIN_IMMUNITY,"Nombre - Quita una medalla a un jugador");
	register_concmd("addxp","scxpm_addxp",ADMIN_IMMUNITY,"Nombre Valor - Añade exp a un jugador");
	register_concmd("removexp","scxpm_removexp",ADMIN_IMMUNITY,"Nombre Valor - Quita exp de un jugador");
	register_concmd("godmode","scxpm_godmode",ADMIN_IMMUNITY,"Nombre - Activa o desactiva la invencibilidad en un jugador.");
	register_concmd("noclipmode","scxpm_noclipmode",ADMIN_IMMUNITY,"Nombre - Activa o desactiva el modo noclip en un jugador.");
	register_concmd("say selectskills","SCXPMSkill",-1,"");
	register_concmd("say resetskills","scxpm_reset",-1,"");
	register_concmd("say playerskills","scxpm_others",-1,"");
	register_concmd("say skillsinfo","scxpm_info",-1,"");
	register_concmd("say scxpminfo","scxpm_version",-1,"");
	register_concmd("say /selectskills","SCXPMSkill",-1,"");
	register_concmd("say /resetskills","scxpm_reset",-1,"");
	register_concmd("say /playerskills","scxpm_others",-1,"");
	register_concmd("say /skillsinfo","scxpm_info",-1,"");
	register_concmd("say /scxpminfo","scxpm_version",-1,"");
	register_concmd("selectskills","SCXPMSkill",0,"");
	register_concmd("resetskills","scxpm_reset",0,"");
	register_concmd("playerskills","scxpm_others",0,"");
	register_concmd("skillsinfo","scxpm_info",0,"");
	register_concmd("scxpminfo","scxpm_version",0,"");
	register_cvar("scxpm_gamename","1");
	for( new i = 0; i<33 ;i++ )
	{
		loaddata[i] = false;
	}
	plugin_ended = false;

	register_cvar("scxpm_minplaytime", "0");
	register_cvar("scxpm_hud_channel", "3");
	register_cvar( "scxpm_xpgain", "1.0" );
	register_cvar( "scxpm_maxlevel", "1800" );
	set_task( 0.5, "scxpm_sdac", 0, "", 0, "b" );
	register_logevent("roundstart", 2, "0=World triggered", "1=Round_Start");
	register_message(get_user_msgid("Health"), "message_Health");
}

public plugin_end() {
	plugin_ended = true;
	return PLUGIN_HANDLED;
}

public message_Health(msgid, dest, id) {
	if(!is_user_alive(id)) {
		return PLUGIN_CONTINUE;
	}
	
	static hp;
	hp = get_msg_arg_int(1);
	
	if(hp > 255 && (hp % 256) == 0) {
		set_msg_arg_int(1, ARG_BYTE, ++hp);
	}
	
	return PLUGIN_CONTINUE;
}

public scxpm_addxp( id, level, cid ) {
	if ( !cmd_access( id, ADMIN_IMMUNITY, cid, 3 ) )
	{
		return PLUGIN_HANDLED;
	}
	
	new targetarg[32];
	read_argv(1, targetarg, 31);
	new target = cmd_target( id, targetarg, 11 );
	if ( !target )
	{
		return PLUGIN_HANDLED;
	}
	new xparg[32];
	read_argv( 2, xparg, 31 );
	new addxp = str_to_num( xparg );
	new name[32];
	get_user_name( target, name, 31 );
	if ( addxp + xp[target] > scxpm_calc_xp ( get_cvar_num( "scxpm_maxlevel" ) ) )
	{
		addxp = scxpm_calc_xp ( get_cvar_num( "scxpm_maxlevel" ) ) - xp[target];
	}
	
	if ( addxp + xp[target] < 0 )
	{
		xp[target] = 0;
	}
	
	xp[target] += addxp;
	
	SavePlayerData( target );
	new adminname[32];
	new adminid[32];
	get_user_name( id, adminname, 31 );
	get_user_authid(id, adminid, 31 );
	log_amx("[SCXPM] %s %s gave %s %i xp ", adminname, adminid, name, addxp );
	console_print( id, "%s gained %i xp. New xp: %i", name, addxp, xp[target] );
	
	return PLUGIN_HANDLED;
}

public scxpm_removexp( id, level, cid ) {
	if ( !cmd_access( id, ADMIN_IMMUNITY, cid, 3 ) )
	{
		return PLUGIN_HANDLED;
	}
	
	new targetarg[32];
	read_argv(1, targetarg, 31);
	new target = cmd_target( id, targetarg, 11 );
	if( !target )
	{
		return PLUGIN_HANDLED;
	}
	new xparg[32];
	read_argv( 2, xparg, 31 );
	new removexp = str_to_num( xparg );
	new name[32];
	get_user_name( target, name, 31 );
	if ( xp[target] - removexp > 11500000 )
	{
		removexp = xp[target] - 11500000;
	}
	
	xp[target] -= removexp;
	
	if ( xp[target] < 0 )
	{
		xp[target] = 0;
	}
	
	playerlevel[target] = scxpm_calc_lvl ( xp[target] );
	while ( playerlevel[target] < health[target] + armor[target] + dist[target] + rhealth[target] + rarmor[target] + skillpoints[target] )
	{
		if ( health[target] > 0  )
		{
			health[target]--;
		}
		else if ( armor[target] > 0 )
		{
			armor[target]--;
		}
		else if ( rhealth[target] > 0 )
		{
			rhealth[target]--;
		}
		else if ( rarmor[target] > 0 )
		{
			rarmor[target]--;
		}
		else if ( dist[target] > 0 )
		{
			dist[target]--;
		}
	}
	
	scxpm_calcneedxp ( target );
	
	SavePlayerData( target );
	
	new adminname[32];
	new adminid[32];
	get_user_name( id, adminname, 31 );
	get_user_authid(id, adminid, 31 );
	log_amx("[SCXPM] %s %s removed %s %i xp ", adminname, adminid, name, removexp );
	console_print( id, "%s lost %i xp. New xp: %i", name, removexp, xp[target] );
	return PLUGIN_HANDLED;
}

public scxpm_gn() { 
	if( get_cvar_num("scxpm_gamename") >= 1 )
	{
		new g[32];
		format( g, 31, "SCXPM %s", VERSION );
		forward_return( FMV_STRING, g);
		return FMRES_SUPERCEDE;
	}
	return PLUGIN_HANDLED;
}

public scxpm_setlvl( id, level, cid ) {
	if ( !cmd_access( id, ADMIN_IMMUNITY, cid, 3 ) )
	{
		return PLUGIN_HANDLED;
	}
	new targetarg[32];
	read_argv(1, targetarg, 31);
	new target = cmd_target( id, targetarg, 11 );
	if( !target )
	{
		return PLUGIN_HANDLED;
	}
	new lvlarg[32];
	read_argv( 2, lvlarg, 31 );
	new nowlvl = str_to_num( lvlarg );
	new name[32];
	get_user_name( target, name, 31 );
	if( nowlvl >= get_cvar_num( "scxpm_maxlevel" ) )
	{
		nowlvl = get_cvar_num( "scxpm_maxlevel" );
	}
	if ( nowlvl < 0 )
	{
		nowlvl = 0;
	}
	if ( nowlvl == playerlevel[target] )
	{
		if ( target == id )
		{
			console_print( id, "[SCXPM] Ya tienes nivel %i.", nowlvl );
		}
		else
		{
			console_print(id, "[SCXPM] El nivel de %s ya es %i.", name, nowlvl );
		}
		return PLUGIN_HANDLED;
	}
	else
	{
		if ( nowlvl >= 1800 )
		{
			nowlvl = 1800;
			xp[target] = 11500000;
		}
		else
		{
			if ( nowlvl <= 0 )
			{
				nowlvl = 0;
				xp[target] = 0;
			}
			else
			{
				new helpvar = nowlvl - 1;
				new Float:m70b = float( helpvar ) * 70.0;
				new Float:mselfm3dot2b = float( helpvar ) * float(helpvar) * 3.5;
				xp[target] = floatround( m70b + mselfm3dot2b + 30.0);
			}
		}
	}
	if ( playerlevel[target] > nowlvl )
	{
		playerlevel[target] = nowlvl;
		if (target == id )
		{
			console_print( id, "[SCXPM] Bajaste tu nivel a %i. Restablece tus habilidades!", playerlevel[target] );
		}
		else
		{
			console_print( id, "[SCXPM] Bajaste el nivel de %s a %i.", name, playerlevel[target] );
		}
		if (  nowlvl > 0 )
		{
			if ( target != id )
			{
				client_print( target, print_chat, "[SCXPM] Un Admin ha bajado tu nivel a %i. Restablece tus habilidades!", playerlevel[target] );
			}
			scxpm_reset( target );
		}
		else
		{
			if ( target != id )
			{
				client_print( target, print_chat, "[SCXPM] Un Admin ha bajado tu nivel a 0. Perdiste todas tus habilidades!" );
			}
			health[target] = 0;
			armor[target] = 0;
			dist[target] = 0;
			rhealth[target] = 0;
			rarmor[target] = 0;
			skillpoints[target] = 0;
			ApplyCappedHealthAndArmor(target);
		}
	}
	else
	{
		if ( nowlvl < 1800 )
		{
			skillpoints[target] = skillpoints[target] + nowlvl - playerlevel[target];
			playerlevel[target] = nowlvl;
			if ( target == id )
			{
				console_print( id, "[SCXPM] Subiste tu nivel a %i.", playerlevel[target] );
			}
			else
			{
				console_print( id, "[SCXPM] Subiste el nivel de %s a %i.", name, playerlevel[target] );
				client_print( target, print_chat, "[SCXPM] Un Admin subio tu nivel a %i!", playerlevel[target] );
			}
			SCXPMSkill( target );
		}
		else
		{
			new max_health = is_vip[target] ? 700 : 500;
			new max_armor = is_vip[target] ? 700 : 500;

			health[target] = max_health;
			armor[target] = max_armor;
			dist[target] = 60;
			rhealth[target] = 300;
			rarmor[target] = 300;
			skillpoints[target] = 0;
			playerlevel[target] = 1800;
			if ( target == id )
			{
				console_print( id, "[SCXPM] Llegaste al nivel 1800! YOU DESERVE A MEDAL!." );
			}
			else
			{
				console_print( id, "[SCXPM] Subiste el nivel de %s a 1800.", name );
				client_print( target, print_chat, "[SCXPM] Un admin subio tu nivel a 1800!" );
			}
		}
	}
	scxpm_calcneedxp( target );
	SavePlayerData( target );
	new adminname[32];
	new adminid[32];
	get_user_name( id, adminname, 31 );
	get_user_authid(id, adminid, 31 );
	log_amx( "[SCXPM] %s %s setlvl %s to level %i  ", adminname, adminid, name, playerlevel[target] );
	
	return PLUGIN_HANDLED;
}

public scxpm_addmedal( id, level, cid) {
	if ( !cmd_access( id, ADMIN_IMMUNITY, cid, 2 ) )
	{
		return PLUGIN_HANDLED;
	}
	new targetarg[32];
	read_argv(1, targetarg, 31);
	new target = cmd_target( id, targetarg, 11 );
	if ( !target )
	{
		return PLUGIN_HANDLED;
	}
	new name[32];
	get_user_name( target, name, 31 );
	if ( medals[target] < 16 )
	{
		medals[target]+=1;
		console_print( id, "You awarded %s with a Medal.", name );
		client_print( 0, print_chat, "[SCXPM] %s recibio una medalla! (Ahora tiene %i medallas)", name, medals[target] - 1 );
	}
	else
	{
		console_print( id, "%s ya tiene 15 medallas.", name );
	}
	
	new adminname[32];
	new adminid[32];
	get_user_name( id, adminname, 31 );
	get_user_authid(id, adminid, 31 );
	log_amx( "[SCXPM] %s %s addmedal to %s", adminname, adminid, name );
	return PLUGIN_HANDLED;
}

public scxpm_removemedal( id, level, cid ) {
	if ( !cmd_access( id, ADMIN_IMMUNITY, cid, 2 ) )
	{
		return PLUGIN_HANDLED;
	}
	new targetarg[32];
	read_argv( 1, targetarg, 31);
	new target = cmd_target( id, targetarg, 11 );
	if( !target )
	{
		return PLUGIN_HANDLED;
	}
	new name[32];
	get_user_name( target, name, 31 );
	if ( medals[target] > 1 )
	{
		medals[target]-=1;
		console_print( id, "Quitaste una medalla a %s.", name );
		client_print( 0, print_chat, "[SCXPM] %s perdio una medalla! (Le quedan %i medallas)", name,medals[target] - 1 );
	}
	else
	{
		console_print( id, "%s ya no tiene medallas.", name );
	}
	
	new adminname[32];
	new adminid[32];
	get_user_name( id, adminname, 31 );
	get_user_authid(id, adminid, 31 );
	log_amx( "[SCXPM] %s %s removemedal from %s", adminname, adminid, name );
	return PLUGIN_HANDLED;
}

public scxpm_godmode(id,level,cid) {
	if ( !cmd_access( id, ADMIN_IMMUNITY, cid, 2 ) )
	{
		return PLUGIN_HANDLED;
	}
	new godmode_arg[32];
	read_argv( 1, godmode_arg, 31 );
	new godmode_target = cmd_target( id, godmode_arg, 0 );
	if ( godmode_target )
	{
		new godmode_name[32];
		get_user_name( godmode_target, godmode_name, 31);
		if ( !is_user_alive( godmode_target ) )
		{
			console_print( id, "[SCXPM] No se pudo activar la invencibilidad en %s", godmode_name );
			return PLUGIN_HANDLED;
		}
		if ( has_godmode[godmode_target] )
		{
			set_user_godmode( godmode_target );
			has_godmode[godmode_target] = false;
			if ( godmode_target == id )
			{
				console_print(id,"[SCXPM] Desactivaste tu invencibilidad!");
			}
			else
			{
				console_print( id, "[SCXPM] El jugador %s perdio su invencibilidad!", godmode_name );
				client_print( godmode_target, print_chat, "[SCXPM] Un Admin te desactivo la invencibilidad" );
			}
		}
		else
		{
			has_godmode[godmode_target] = true;
			set_user_godmode( godmode_target, 1 );
			if ( godmode_target == id )
			{
				console_print( id, "[SCXPM] Activaste la invencibilidad en ti." );
			}
			else
			{
				console_print( id, "[SCXPM] El jugador %s es invulnerable!", godmode_name );
				client_print( godmode_target, print_chat, "[SCXPM] Un Admin activo la invencibilidad en ti!" );
			}
		}
	}
	return PLUGIN_HANDLED;
}

public scxpm_noclipmode( id, level, cid ) {
	if ( !cmd_access( id, ADMIN_IMMUNITY, cid, 2 ) )
	{
		return PLUGIN_HANDLED;
	}
	new noclipmode_arg[32];
	read_argv( 1, noclipmode_arg, 31 );
	new noclipmode_target = cmd_target( id, noclipmode_arg, 0 );
	if ( noclipmode_target )
	{
		new noclipmode_name[32];
		get_user_name( noclipmode_target, noclipmode_name, 31 );
		if ( !is_user_alive( noclipmode_target ) )
		{
			console_print( id, "[SCXPM] No se pudo activar noclip en %s", noclipmode_name );
			return PLUGIN_HANDLED;
		}
		if ( get_user_noclip( noclipmode_target ) )
		{
			set_user_noclip( noclipmode_target );
			if ( noclipmode_target == id )
			{
				console_print( id, "[SCXPM] Te desactivaste el modo Noclip" );
			}
			else
			{
				console_print( id, "[SCXPM] El jugador %s perdio el modo Noclip!", noclipmode_name );
				client_print( noclipmode_target, print_chat, "[SCXPM] Un Admin te desactivo el modo Noclip!" );
			}
		}
		else
		{
			set_user_noclip( noclipmode_target, 1 );
			if ( noclipmode_target == id )
			{
				console_print( id, "[SCXPM] Activaste Noclip en ti!" );
			}
			else
			{

				console_print( id, "[SCXPM] %s tiene activado Noclip!", noclipmode_name );
				client_print( noclipmode_target, print_chat, "[SCXPM] Un Admin te activo el modo Noclip!" );
			}
		}
	}
	return PLUGIN_HANDLED;
}

public scxpm_reset(id) {
	health[id] = 0;
	armor[id] = 0;
	dist[id] = 0;
	rhealth[id] = 0;
	rarmor[id] = 0;
	skillpoints[id] = playerlevel[id];
	ApplyCappedHealthAndArmor(id);

	if ( skillpoints[id] > 0 )
	{
		client_print( id, print_chat, "[SCXPM] Todas tus habilidades se han reiniciado. Vuelvelas a elegir .." );
		SCXPMSkill( id );
	}
	else
	{
		client_print( id, print_chat, "[SCXPM] No tienes habilidades..." );
	}
}

public scxpm_version( id ) {
	new allinfo[1023];
	format( allinfo, 1022, "Plugin Name: SCXPM (Sven Cooperative Experience Mod)^nPlugin Type: Running under AMXModX (www.amxmodx.org)^nAuthor: Silencer/Gemini^nVersion: %s^nLast Update: %s^nExperience Multiplier (Server Side): %f^nInformation: http://forums.alliedmods.net/showthread.php?t=44168", VERSION, LASTUPDATE, get_cvar_float( "scxpm_xpgain" ) );
	show_motd( id, allinfo, "Informacion del SCXPM" );
}

public scxpm_info( id ) {
	new allskills[1023] = "1. Strength:^n   Starthealth + 1 * Strengthlevel.^n";
	format(allskills,1022,"%s^n2. Superior Armor:^n   Startarmor + 1 * Armorlevel.^n",allskills);
	format(allskills,1022,"%s^n3. Team Power:^n   Supports nearby Teammates with HP and AP^n   and also yourself on higher Level.^n",allskills);
	format(allskills,1022,"%s^n4. Regeneration:^n   One HP every (150.5-(RegenLvl/2)) Seconds.^n",allskills);
	format(allskills,1022,"%s^n5. Nano Armor:^n   One AP every (150.5-(NanoLvl/2)) Seconds.^n",allskills);
	format(allskills,1022,"%s^nSpecial - Medals:^n   Given by an Admin, Shows your Importance.^n   (Minimal Ability Support)",allskills);
	show_motd(id,allskills,"Info sobre habilidades")
}

public scxpm_others( id ) {
	new alldata[2048];
	alldata="Jugador            Nivel  Medallas^n"
	new iPlayers[32],iNum
	get_players(iPlayers,iNum)
	for(new g=0;g<iNum;g++)
	{
		new i=iPlayers[g]
		if(is_user_connected(i))
		{
			new name[20]
			get_user_name(i,name,19)
			new toadd=20-strlen(name)
			new spaces[20]=""
			add(spaces,19,"                   ",toadd)
			format(alldata,2047,"%s^n%s %s %i     %i",alldata,name,spaces,playerlevel[i],medals[i]-1)
		}
	}
	show_motd( id, alldata, "Datos de los jugadores" );
}

public scxpm_getrank( id ) {
	switch( playerlevel[id] )
	{
		case 1800: { rank[id] = "Comandante Shepard"; }
		case 1700..1799: { rank[id] = "Almirante Anderson"; }
		case 1600..1699: { rank[id] = "Top 15 de los Lideres"; }
		case 1500..1599: { rank[id] = "Top 30 de los Lideres"; }
		case 1400..1499: { rank[id] = "General"; }
		case 1300..1399: { rank[id] = "Lider de Operaciones Ocultas"; }
		case 1200..1299: { rank[id] = "Prog. de Operaciones Ocultas"; }
		case 1100..1199: { rank[id] = "Miembro de Operaciones Ocultas"; }
		case 1000..1099: { rank[id] = "Lider de Fuerzas Unidas"; }
		case 900..999: { rank[id] = "Miembro de Fuerzas Unidas"; }
		case 800..899: { rank[id] = "Lider de Fuerza Especial"; }
		case 700..799: { rank[id] = "Miembro de Fuerza Especial"; }
		case 600..699: { rank[id] = "Lider de Fuerza Profesional"; }
		case 500..599: { rank[id] = "Miembro de Fuerza Profesional"; }
		case 400..499: { rank[id] = "Agente libre Profesional"; }
		case 300..399: { rank[id] = "Agente libre"; }
		case 200..299: { rank[id] = "Primera Clase Privada"; }
		case 100..199: { rank[id] = "Segunda Clase privada"; }
		case 50..99: { rank[id] = "Tercera Clase Privada"; }
		case 20..49: { rank[id] = "Combatiente"; }
		case 5..19: { rank[id] = "Civil"; }
		case 0..4: { rank[id] = "Civil asustado"; }
	}
}

public scxpm_newbiehelp( id ) {
	if ( is_user_connected( id ) )
	{
		new name[32];
		get_user_name( id, name, 31);
		client_print( id, print_chat, "[SCXPM] Comandos: ^"'say skillsinfo', 'say selectskills', 'say resetskills', 'say playerskills', 'say scxpminfo'^"" );
	}
}

public client_authorized(id)
{
    CheckVipStatus(id);
    LoadPlayerData(id);
}

public CheckVipStatus(id)
{
    is_vip[id] = false;
    new szPlayerName[32];
    get_user_name(id, szPlayerName, charsmax(szPlayerName));

    if (!file_exists(VIP_FILE)) {
        return;
    }

    new file = fopen(VIP_FILE, "rt");
    if (file)
    {
        new szLine[32];
        while (fgets(file, szLine, charsmax(szLine)))
        {
            trim(szLine);
            if (equali(szLine, szPlayerName))
            {
                is_vip[id] = true;
                break;
            }
        }
        fclose(file);
    }
}

public LoadEmptySkills( id ) {
	xp[id] = 0;
	playerlevel[id] = 0;
	scxpm_calcneedxp( id );
	scxpm_getrank( id );
	skillpoints[id] = 0;
	medals[id] = 4;
	health[id] = 0;
	armor[id] = 0;
	dist[id] = 0;
	rhealth[id] = 0;
	rarmor[id] = 0;
	lastDeadflag[id] = 1;
	lastfrags[id] = 0;
	set_task( 35.0, "scxpm_newbiehelp", id, "", 0, "a", 3 );
	ApplyCappedHealthAndArmor(id);
}

public client_connect( id ) {
	lastfrags[ id ] = 0;
	load_error[ id ] = false;
	loaddata[ id ] = false;
    is_vip[id] = false;
}

public client_putinserver(id)
{
    CheckVipStatus(id);
    LoadPlayerData(id);
}

public client_disconnect( id ) {
	if ( get_cvar_num( "scxpm_minplaytime" ) == 0 || get_cvar_num( "scxpm_minplaytime" ) <= get_user_time( id ) ) {
		SavePlayerData( id );
	}
	
	xp[id] = 0;
	neededxp[id] = 0;
	playerlevel[id] = 0;
	skillpoints[id] = 0;
	medals[id] = 0;
	health[id] = 0;
	armor[id] = 0;
	dist[id] = 0;
	rhealth[id] = 0;
	rarmor[id] = 0;
	rhealthwait[id] = 0;
	rarmorwait[id] = 0;
	rank[id] = "Loading...";
	load_error[ id ] = false;
	loaddata[ id ] = false;
    is_vip[id] = false;
}

public scxpm_prethink( id ) {
	new deadflag = pev( id, pev_deadflag );
	if ( !deadflag && lastDeadflag[id] )
	{
		scxpm_client_spawn( id );
	}
	
	lastDeadflag[id] = deadflag;
}

public scxpm_client_spawn( id ) {
    if (is_user_alive(id)) {
        ApplyCappedHealthAndArmor(id);
    }
}

public client_spawn ( id ) {
	if (is_user_alive(id)) {
        ApplyCappedHealthAndArmor(id);
    }
} 

public roundstart ( ) {
	for ( new i = 0; i < 33; i++ )
	{
		lastDeadflag[i] = 1;
	}
	
	new iPlayers[32], iNum;
	get_players( iPlayers, iNum );
	for( new g = 0; g < iNum ;g++ )
	{
		new id = iPlayers[g];
		if (is_user_alive(id)) {
            ApplyCappedHealthAndArmor(id);
		}
	}
}

public scxpm_calcneedxp ( id ) {
	new Float:m70 = float( playerlevel[id] ) * 70.0;
	new Float:mselfm3dot2 = float( playerlevel[id] ) * float( playerlevel[id] ) * 3.5;
	neededxp[id] = floatround( m70 + mselfm3dot2 + 30.0 );
}

public scxpm_calc_lvl ( xp ) {
	return floatround( -10 + floatsqroot( 100 - ( 60 / 7 - ( ( xp - 1 ) / 3.5 ) ) ), floatround_ceil );
}

public scxpm_calc_xp ( level) {
	level--;
	return floatround( (float( level ) * 70.0) + (float( level ) * float(level) * 3.5) + 30);
}

public scxpm_regen() {
	new iPlayers[32], iNum;
	get_players(iPlayers, iNum);
	for (new g = 0; g < iNum; g++)
	{
		new i = iPlayers[g];
		if (is_user_connected(i) && is_user_alive(i))
		{
			new max_health_cap = is_vip[i] ? 700 : 500;
			new max_armor_cap = is_vip[i] ? 700 : 500;

			if (rhealth[i] > 0)
			{
				if (rhealthwait[i] == 0)
				{
					if (get_user_health(i) < max_health_cap)
					{
						set_user_health(i, get_user_health(i) + 1);
						rhealthwait[i] = 300 - rhealth[i];
					}
				}
				else
				{
					rhealthwait[i]--;
					if (get_user_health(i) < max_health_cap && random_num(0, 200 + rhealth[i] + medals[i]) > 200)
					{
						set_user_health(i, get_user_health(i) + 1);
					}
				}
			}
			if (rarmor[i] > 0)
			{
				if (rarmorwait[i] == 0)
				{
					if (get_user_armor(i) < max_armor_cap)
					{
						set_user_armor(i, get_user_armor(i) + 1);
						rarmorwait[i] = 300 - rarmor[i];
					}
				}
				else
				{
					rarmorwait[i]--;
					if (get_user_armor(i) < max_armor_cap && random_num(0, 200 + rarmor[i] + medals[i]) > 200)
					{
						set_user_armor(i, get_user_armor(i) + 1);
					}
				}
			}
		}
	}
}

public scxpm_sdac() {
	switch(onecount)
	{
		case false:
		{
			onecount = true;
		}
		case true:
		{
			scxpm_reexp();
			scxpm_showdata();
			onecount = false;
		}
	}
	scxpm_regen();
}

public scxpm_reexp()
{
	new iPlayers[32], iNum;
	get_players( iPlayers, iNum );
	for( new g = 0; g < iNum; g++ )
	{
		new i=iPlayers[g];
		if ( is_user_connected(i) )
		{
			if ( playerlevel[i] >= 1800 )
			{
				xp[i] = 11500000;
			}
			else if ( playerlevel[i] >= get_cvar_num( "scxpm_maxlevel" ) )
			{
				xp[i] = scxpm_calc_xp( playerlevel[i] );
			}
			else
			{
				new Float:helpvar = float(xp[i])/5.0/get_cvar_float("scxpm_xpgain")+float(get_user_frags(i))-float(lastfrags[i]);
				xp[i]=floatround(helpvar*5.0*get_cvar_float("scxpm_xpgain"));
				lastfrags[i] = get_user_frags(i);
				if( neededxp[i] > 0 )
				{
					if(xp[i] >= neededxp[i])
					{
						new playerlevelOld = playerlevel[i];
						playerlevel[i] = scxpm_calc_lvl(xp[i]);
						skillpoints[i] += playerlevel[i] - playerlevelOld;
						scxpm_calcneedxp(i);
						new name[32];
						get_user_name( i, name, 31 );
						if ( playerlevel[i] == 1800 )
						{
							client_print(0,print_chat,"[SCXPM] Todos digan ^"Felicidades!!!^" a %s, quien ha alcanzado el nivel 1800!",name)
							log_amx("[SCXPM] El jugador %s llego al nivel 1800!", name );
						}
						else
						{
							client_print(i,print_chat,"[SCXPM] Felicidades, %s, llegaste al nivel %i - Proximo Nivel: %i XP - Necesitas: %i XP",name,playerlevel[i],neededxp[i],neededxp[i]-xp[i])
							log_amx("[SCXPM] El jugador %s alcanzo el nivel %i!", name, playerlevel[i] );
						}
						scxpm_getrank(i)
						SCXPMSkill(i)
						SavePlayerData( i );
					}
				}
			}
		}
	}
}

public scxpm_showdata() {
	new iPlayers[32],iNum
	get_players(iPlayers,iNum)
	for(new g=0;g<iNum;g++)
	{
		new i=iPlayers[g]
		if(is_user_connected(i))
		{
			set_hudmessage(50,135,180,0.5,0.04,0,1.0,255.0,0.0,0.0,get_cvar_num("scxpm_hud_channel"))
			
			if (playerlevel[i] >= 1800) {
				show_hudmessage(i,"Level:   1800 / 1800^nRank:   Highest Force Leader^nMedals:   %i / 15^nHealth:   %i^nArmor:   %i", medals[i]-1, get_user_health( i ), get_user_armor( i ) )
			}
			else if ( playerlevel[i] >= get_cvar_num( "scxpm_maxlevel" ) ) {
				if ( get_user_health( i ) > 250 || get_user_armor( i ) > 250)
				{
					show_hudmessage(i,"Exp.:   %i^nLevel:   %i / %i^nRank:   %s^nMedals:   %i / 15^nHealth:   %i^nArmor:   %i", xp[i],playerlevel[i],get_cvar_num( "scxpm_maxlevel" ),rank[i],medals[i]-1, get_user_health( i ), get_user_armor( i ) )
				}
				else
				{
					show_hudmessage(i,"Exp.:   %i^nLevel:   %i / %i^nRank:   %s^nMedals:   %i / 15", xp[i],playerlevel[i],get_cvar_num( "scxpm_maxlevel" ),rank[i],medals[i]-1 )
				}
			}
			else {
				if ( get_user_health( i ) > 250 || get_user_armor( i ) > 250)
				{
					show_hudmessage(i,"Exp.:   %i / %i  (+%i)^nLevel:   %i / %i^nRank:   %s^nMedals:   %i / 15^nHealth:   %i^nArmor:   %i", xp[i],neededxp[i],neededxp[i]-xp[i],playerlevel[i],get_cvar_num( "scxpm_maxlevel" ),rank[i],medals[i]-1, get_user_health( i ), get_user_armor( i ) )
				}
				else
				{
					show_hudmessage(i,"Exp.:   %i / %i  (+%i)^nLevel:   %i / %i^nRank:   %s^nMedals:   %i / 15", xp[i],neededxp[i],neededxp[i]-xp[i],playerlevel[i],get_cvar_num( "scxpm_maxlevel" ),rank[i],medals[i]-1 )
				}
			}
		}
	}
}

public SCXPMSkill( id ) {
	skillIncrement[id] = 1;
	if (skillpoints[id] > 20) {
		SCXPMIncrementMenu( id );
	}
	else {
		SCXPMSkillMenu( id );
	}
}

public SCXPMSkillMenu( id ) {
	new menuBody[1024];
    new max_health = is_vip[id] ? 700 : 500;
    new max_armor = is_vip[id] ? 700 : 500;

	format(menuBody,1023,"Habilidades - Puntos: %i^n^n1. Fuerza [ %i / %i ]^n2. Armadura Superior [ %i / %i ]^n3. Poder de equipo [ %i / 60 ]^n4. Regeneracion de salud [ %i / 300 ]^n5. Reg. de armadura [ %i / 300 ]^n^n0. Hecho"
	,skillpoints[id],health[id],max_health,armor[id],max_armor,dist[id],rhealth[id],rarmor[id]);
	show_menu(id,(1<<0)|(1<<1)|(1<<2)|(1<<3)|(1<<4)|(1<<9),menuBody,-1,"Select Skill");
}

public SCXPMIncrementMenu( id ) {
	new menuBody[1024];
	if (skillpoints[id] >= 20 && skillpoints[id] < 50) {
		format(menuBody,1023,"Increment your skill with^n^n1. 1 point^n2. 5 points^n3. 10 points^n4. 25 points");
	}
	else if (skillpoints[id] >= 50 && skillpoints[id] < 100) {
		format(menuBody,1023,"Increment your skill with^n^n1. 1 point^n2. 5 points^n3. 10 points^n4. 25 points^n5. 50 points");
	}
	else if (skillpoints[id] >= 100) {
		format(menuBody,1023,"Increment your skill with^n^n1. 1 point^n2. 5 points^n3. 10 points^n4. 25 points^n5. 50 points^n6. 100 points");
	}
	show_menu(id,(1<<0)|(1<<1)|(1<<2)|(1<<3)|(1<<4)|(1<<5),menuBody,-1,"Select Increment");
}

public SCXPMIncrementChoice( id, key ) {
	switch(key){
		case 0: skillIncrement[id] = 1;
		case 1: skillIncrement[id] = 5;
		case 2: skillIncrement[id] = 10;
		case 3: skillIncrement[id] = 25;
		case 4: skillIncrement[id] = 50;
		case 5: skillIncrement[id] = 100;
	}
	SCXPMSkillMenu( id );
}

public SCXPMSkillChoice( id, key ) {
    new max_health = is_vip[id] ? 700 : 500;
    new max_armor = is_vip[id] ? 700 : 500;

	switch(key)
	{
		case 0:
		{
			if(skillpoints[id] > 0 && health[id] < max_health)
			{
				if (skillIncrement[id] + health[id] >= max_health) {
					skillIncrement[id] = max_health - health[id];
				}
				skillpoints[id] -= skillIncrement[id];
				health[id] += skillIncrement[id];
				client_print(id,print_chat,"[SCXPM] Usaste %i punto(s) para Fuerza. Nivel: %i", skillIncrement[id], health[id]);
				ApplyCappedHealthAndArmor(id);
			}
			if(skillpoints[id]>0) SCXPMSkill(id);
		}
		case 1:
		{
			if(skillpoints[id] > 0 && armor[id] < max_armor)
			{
				if (skillIncrement[id] + armor[id] >= max_armor) {
					skillIncrement[id] = max_armor - armor[id];
				}
				skillpoints[id]-= skillIncrement[id];
				armor[id] += skillIncrement[id];
				client_print(id,print_chat,"[SCXPM] Usaste %i punto(s) para Armadura. Nivel: %i", skillIncrement[id], armor[id]);
				ApplyCappedHealthAndArmor(id);
			}
			if(skillpoints[id]>0) SCXPMSkill(id);
		}
		case 2:
		{
			if(skillpoints[id] > 0 && dist[id] < 60)
			{
				if (skillIncrement[id] + dist[id] >= 60) {
					skillIncrement[id] = 60 - dist[id];
				}
				skillpoints[id] -= skillIncrement[id];
				dist[id] += skillIncrement[id];
				client_print(id,print_chat,"[SCXPM] Usaste %i punto(s) para Poder de equipo. Nivel: %i", skillIncrement[id], dist[id]);
			}
			if(skillpoints[id]>0) SCXPMSkill(id);
		}
		case 3:
		{
			if(skillpoints[id] > 0 && rhealth[id] < 300)
			{
				if (skillIncrement[id] + rhealth[id] >= 300) {
					skillIncrement[id] = 300 - rhealth[id];
				}
				skillpoints[id] -= skillIncrement[id];
				rhealth[id] += skillIncrement[id];
				client_print(id,print_chat,"[SCXPM] Usaste %i punto(s) para Regen. de salud. Nivel: %i", skillIncrement[id], rhealth[id]);
			}
			if(skillpoints[id]>0) SCXPMSkill(id);
		}
		case 4:
		{
			if(skillpoints[id] > 0 && rarmor[id] < 300)
			{
				if (skillIncrement[id] + rarmor[id] >= 300) {
					skillIncrement[id] = 300 - rarmor[id];
				}
				skillpoints[id] -= skillIncrement[id];
				rarmor[id] += skillIncrement[id];
				client_print(id,print_chat,"[SCXPM] Usaste %i punto(s) para Reg. de armadura. Nivel: %i", skillIncrement[id], rarmor[id]);
			}
			if(skillpoints[id]>0) SCXPMSkill(id);
		}
		case 9: {}
	}
	return PLUGIN_HANDLED;
}

public LoadPlayerData( id ) {
	if (plugin_ended == false) {
		scxpm_loadxp_file( id );
	}
}

public SavePlayerData( id ) {
	if (plugin_ended == false) {
		if (loaddata[id] == true) {
			if (xp[id] >= 0) {
				scxpm_savexp_file( id );
			}
		}
	}
	return PLUGIN_CONTINUE;
}

public scxpm_loadxp_file( id ) {
    new nickname[35];
    get_user_name(id, nickname, 34);
    
    if ( equali(nickname, "") ) {
        LoadEmptySkills( id );
        return PLUGIN_CONTINUE;
    }
    
    new vaultkey[64], vaultdata[128];
    format(vaultkey,63,"%s-scxpm",nickname);
    
    if ( vaultdata_exists(vaultkey) ) {
        get_vaultdata(vaultkey,vaultdata,127);
        replace_all(vaultdata,127,"#"," ");
        new pre_xp[16],pre_playerlevel[8],pre_skillpoints[8],pre_medals[8],pre_health[8],pre_armor[8],pre_dist[8],pre_rhealth[8],pre_rarmor[8];
        parse(vaultdata,pre_xp,15,pre_playerlevel,7,pre_skillpoints,7,pre_medals,7,pre_health,7,pre_armor,7,pre_dist,7,pre_rhealth,7,pre_rarmor,7);
        xp[id] = str_to_num(pre_xp);
        playerlevel[id] = str_to_num(pre_playerlevel);
        scxpm_calcneedxp(id);
        scxpm_getrank(id);
        skillpoints[id] = str_to_num(pre_skillpoints);
        medals[id] = str_to_num(pre_medals);
        health[id] = str_to_num(pre_health);
        armor[id] = str_to_num(pre_armor);
        dist[id] = str_to_num(pre_dist);
		rhealth[id] = str_to_num(pre_rhealth);
		rarmor[id] = str_to_num(pre_rarmor);
    }
    else {
        LoadEmptySkills( id );
    }
    loaddata[id] = true;
	ApplyCappedHealthAndArmor(id);
    return PLUGIN_CONTINUE;
}

public scxpm_savexp_file( id ) {
    new nickname[35]
    get_user_name( id, nickname, 34 );
    
    if ( equali(nickname, "") ) {
        return PLUGIN_CONTINUE;
    }
    
    new vaultkey[64],vaultdata[128];
    format( vaultkey, 63, "%s-scxpm", nickname );
    format( vaultdata, 127, "%i#%i#%i#%i#%i#%i#%i#%i#%i",xp[id],playerlevel[id],skillpoints[id],medals[id],health[id],armor[id],dist[id],rhealth[id],rarmor[id]);
    set_vaultdata( vaultkey, vaultdata );
    return PLUGIN_CONTINUE;
}

public ApplyCappedHealthAndArmor(id) {
    if (!is_user_alive(id)) {
        return;
    }

    new max_health_cap = is_vip[id] ? 700 : 500;
    new max_armor_cap = is_vip[id] ? 700 : 500;

    new potential_health = health[id] + 100 + medals[id];
    new potential_armor = armor[id] + medals[id];

    new target_health = min(potential_health, max_health_cap);
    new target_armor = min(potential_armor, max_armor_cap);

    if (get_user_health(id) != target_health) {
        set_user_health(id, target_health);
    }
    if (get_user_armor(id) != target_armor) {
        set_user_armor(id, target_armor);
    }
}