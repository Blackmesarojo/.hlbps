/* Plugin generated by AMXX-Studio */

#include <amxmodx>
#include <cstrike>
#include <fakemeta>

#define PLUGIN "Seperate Radios for Different Player Models "
#define VERSION "3.0"
#define AUTHOR "STealTHB90"


new model[32];
new const AUDIOTEXT[][] =
{
	"COVERME",
	"TAKEPOINT",
	"POSITION",
	"REGROUP",
	"FOLLOWME",
	"HITASSIST",
	"GO",
	"FALLBACK",
	"STICKTOG",
	"GETINPOS",
	"STORMFRONT",
	"REPORTIN",
	"AFFIRM",
	"ROGER",
	"ENEMYSPOT",
	"BACKUP",
	"CLEAR",
	"INPOS",
	"REPRTINGIN",
	"BLOW",
	"NEGATIVE",
	"ENEMYDOWN",
	"FIREINHOLE"
}
new const AUDIOarctic[][] =
{
	"radio/Rarctic/ct_coverme.wav",
	"radio/Rarctic/takepoint.wav",
	"radio/Rarctic/position.wav",
	"radio/Rarctic/regroup.wav",
	"radio/Rarctic/followme.wav",
	"radio/Rarctic/fireassis.wav",
	"radio/Rarctic/com_go.wav",
	"radio/Rarctic/fallback.wav",
	"radio/Rarctic/sticktog.wav",
	"radio/Rarctic/com_getinpos.wav",
	"radio/Rarctic/stormfront.wav",
	"radio/Rarctic/com_reportin.wav",
	"radio/Rarctic/ct_affirm.wav",
	"radio/Rarctic/roger.wav",
	"radio/Rarctic/ct_enemys.wav",
	"radio/Rarctic/ct_backup.wav",
	"radio/Rarctic/clear.wav",
	"radio/Rarctic/ct_inpos.wav",
	"radio/Rarctic/ct_reportingin.wav",
	"radio/Rarctic/blow.wav",
	"radio/Rarctic/negative.wav",
	"radio/Rarctic/enemydown.wav",
	"radio/Rarctic/ct_fireinhole.wav"
}
new const AUDIOgign[][] =
{
	"radio/Rgign/ct_coverme.wav",
	"radio/Rgign/takepoint.wav",
	"radio/Rgign/position.wav",
	"radio/Rgign/regroup.wav",
	"radio/Rgign/followme.wav",
	"radio/Rgign/fireassis.wav",
	"radio/Rgign/com_go.wav",
	"radio/Rgign/fallback.wav",
	"radio/Rgign/sticktog.wav",
	"radio/Rgign/com_getinpos.wav",
	"radio/Rgign/stormfront.wav",
	"radio/Rgign/com_reportin.wav",
	"radio/Rgign/ct_affirm.wav",
	"radio/Rgign/roger.wav",
	"radio/Rgign/ct_enemys.wav",
	"radio/Rgign/ct_backup.wav",
	"radio/Rgign/clear.wav",
	"radio/Rgign/ct_inpos.wav",
	"radio/Rgign/ct_reportingin.wav",
	"radio/Rgign/blow.wav",
	"radio/Rgign/negative.wav",
	"radio/Rgign/enemydown.wav",
	"radio/Rgign/ct_fireinhole.wav"
}
new const AUDIOgsg9[][] =
{
	"radio/Rgsg9/ct_coverme.wav",
	"radio/Rgsg9/takepoint.wav",
	"radio/Rgsg9/position.wav",
	"radio/Rgsg9/regroup.wav",
	"radio/Rgsg9/followme.wav",
	"radio/Rgsg9/fireassis.wav",
	"radio/Rgsg9/com_go.wav",
	"radio/Rgsg9/fallback.wav",
	"radio/Rgsg9/sticktog.wav",
	"radio/Rgsg9/com_getinpos.wav",
	"radio/Rgsg9/stormfront.wav",
	"radio/Rgsg9/com_reportin.wav",
	"radio/Rgsg9/ct_affirm.wav",
	"radio/Rgsg9/roger.wav",
	"radio/Rgsg9/ct_enemys.wav",
	"radio/Rgsg9/ct_backup.wav",
	"radio/Rgsg9/clear.wav",
	"radio/Rgsg9/ct_inpos.wav",
	"radio/Rgsg9/ct_reportingin.wav",
	"radio/Rgsg9/blow.wav",
	"radio/Rgsg9/negative.wav",
	"radio/Rgsg9/enemydown.wav",
	"radio/Rgsg9/ct_fireinhole.wav"
}
new const AUDIOguerilla[][] =
{
	"radio/Rguerilla/ct_coverme.wav",
	"radio/Rguerilla/takepoint.wav",
	"radio/Rguerilla/position.wav",
	"radio/Rguerilla/regroup.wav",
	"radio/Rguerilla/followme.wav",
	"radio/Rguerilla/fireassis.wav",
	"radio/Rguerilla/com_go.wav",
	"radio/Rguerilla/fallback.wav",
	"radio/Rguerilla/sticktog.wav",
	"radio/Rguerilla/com_getinpos.wav",
	"radio/Rguerilla/stormfront.wav",
	"radio/Rguerilla/com_reportin.wav",
	"radio/Rguerilla/ct_affirm.wav",
	"radio/Rguerilla/roger.wav",
	"radio/Rguerilla/ct_enemys.wav",
	"radio/Rguerilla/ct_backup.wav",
	"radio/Rguerilla/clear.wav",
	"radio/Rguerilla/ct_inpos.wav",
	"radio/Rguerilla/ct_reportingin.wav",
	"radio/Rguerilla/blow.wav",
	"radio/Rguerilla/negative.wav",
	"radio/Rguerilla/enemydown.wav",
	"radio/Rguerilla/ct_fireinhole.wav"
}
new const AUDIOleet[][] =
{
	"radio/Rleet/ct_coverme.wav",
	"radio/Rleet/takepoint.wav",
	"radio/Rleet/position.wav",
	"radio/Rleet/regroup.wav",
	"radio/Rleet/followme.wav",
	"radio/Rleet/fireassis.wav",
	"radio/Rleet/com_go.wav",
	"radio/Rleet/fallback.wav",
	"radio/Rleet/sticktog.wav",
	"radio/Rleet/com_getinpos.wav",
	"radio/Rleet/stormfront.wav",
	"radio/Rleet/com_reportin.wav",
	"radio/Rleet/ct_affirm.wav",
	"radio/Rleet/roger.wav",
	"radio/Rleet/ct_enemys.wav",
	"radio/Rleet/ct_backup.wav",
	"radio/Rleet/clear.wav",
	"radio/Rleet/ct_inpos.wav",
	"radio/Rleet/ct_reportingin.wav",
	"radio/Rleet/blow.wav",
	"radio/Rleet/negative.wav",
	"radio/Rleet/enemydown.wav",
	"radio/Rleet/ct_fireinhole.wav"
}
new const AUDIOsas[][] =
{
	"radio/Rsas/ct_coverme.wav",
	"radio/Rsas/takepoint.wav",
	"radio/Rsas/position.wav",
	"radio/Rsas/regroup.wav",
	"radio/Rsas/followme.wav",
	"radio/Rsas/fireassis.wav",
	"radio/Rsas/com_go.wav",
	"radio/Rsas/fallback.wav",
	"radio/Rsas/sticktog.wav",
	"radio/Rsas/com_getinpos.wav",
	"radio/Rsas/stormfront.wav",
	"radio/Rsas/com_reportin.wav",
	"radio/Rsas/ct_affirm.wav",
	"radio/Rsas/roger.wav",
	"radio/Rsas/ct_enemys.wav",
	"radio/Rsas/ct_backup.wav",
	"radio/Rsas/clear.wav",
	"radio/Rsas/ct_inpos.wav",
	"radio/Rsas/ct_reportingin.wav",
	"radio/Rsas/blow.wav",
	"radio/Rsas/negative.wav",
	"radio/Rsas/enemydown.wav",
	"radio/Rsas/ct_fireinhole.wav"
}
new const AUDIOterror[][] =
{
	"radio/Rterror/ct_coverme.wav",
	"radio/Rterror/takepoint.wav",
	"radio/Rterror/position.wav",
	"radio/Rterror/regroup.wav",
	"radio/Rterror/followme.wav",
	"radio/Rterror/fireassis.wav",
	"radio/Rterror/com_go.wav",
	"radio/Rterror/fallback.wav",
	"radio/Rterror/sticktog.wav",
	"radio/Rterror/com_getinpos.wav",
	"radio/Rterror/stormfront.wav",
	"radio/Rterror/com_reportin.wav",
	"radio/Rterror/ct_affirm.wav",
	"radio/Rterror/roger.wav",
	"radio/Rterror/ct_enemys.wav",
	"radio/Rterror/ct_backup.wav",
	"radio/Rterror/clear.wav",
	"radio/Rterror/ct_inpos.wav",
	"radio/Rterror/ct_reportingin.wav",
	"radio/Rterror/blow.wav",
	"radio/Rterror/negative.wav",
	"radio/Rterror/enemydown.wav",
	"radio/Rterror/ct_fireinhole.wav"
}
new const AUDIOurban[][] =
{
	"radio/Rurban/ct_coverme.wav",
	"radio/Rurban/takepoint.wav",
	"radio/Rurban/position.wav",
	"radio/Rurban/regroup.wav",
	"radio/Rurban/followme.wav",
	"radio/Rurban/fireassis.wav",
	"radio/Rurban/com_go.wav",
	"radio/Rurban/fallback.wav",
	"radio/Rurban/sticktog.wav",
	"radio/Rurban/com_getinpos.wav",
	"radio/Rurban/stormfront.wav",
	"radio/Rurban/com_reportin.wav",
	"radio/Rurban/ct_affirm.wav",
	"radio/Rurban/roger.wav",
	"radio/Rurban/ct_enemys.wav",
	"radio/Rurban/ct_backup.wav",
	"radio/Rurban/clear.wav",
	"radio/Rurban/ct_inpos.wav",
	"radio/Rurban/ct_reportingin.wav",
	"radio/Rurban/blow.wav",
	"radio/Rurban/negative.wav",
	"radio/Rurban/enemydown.wav",
	"radio/Rurban/ct_fireinhole.wav"
}

new g_msgSendAudio

public plugin_init() {
    register_plugin(PLUGIN, VERSION, AUTHOR)
	g_msgSendAudio = get_user_msgid("SendAudio")
    register_message(g_msgSendAudio, "sound_radio")
}

public plugin_precache()
for(new i = 0; i <1; i++)
{ 
engfunc(EngFunc_PrecacheSound, AUDIOarctic[i])
engfunc(EngFunc_PrecacheSound, AUDIOgign[i])
engfunc(EngFunc_PrecacheSound, AUDIOgsg9[i])
engfunc(EngFunc_PrecacheSound, AUDIOguerilla[i])
engfunc(EngFunc_PrecacheSound, AUDIOleet[i])
engfunc(EngFunc_PrecacheSound, AUDIOsas[i])
engfunc(EngFunc_PrecacheSound, AUDIOterror[i])
engfunc(EngFunc_PrecacheSound, AUDIOurban[i])
}


public sound_radio(msg_id, msg_dest, id)
{
    for (new i = 0; i <1; i++)
	{
		static idsender, rcmd[32], i

		idsender = get_msg_arg_int(1)

		get_msg_arg_string(2, rcmd, 31)
		
		if(!equal(rcmd, "%!MRAD_", 7))
		return PLUGIN_CONTINUE
		
		
	for(i=0; i<sizeof AUDIOTEXT; i++)
	{
		if(equal(rcmd[7], AUDIOTEXT[i]))
			break
	}
	
	if(i == sizeof AUDIOTEXT)
		return PLUGIN_CONTINUE
		
	new players[32],total, team_name[10]
	get_user_team(id,team_name, 9) 
	get_players(players, total ,"e", team_name)
	cs_get_user_model(id, model, charsmax(model))
	for(new a=0; a < total; ++a) {
	if(idsender == id){
    if (equal(model, "arctic")) 
	{
        client_cmd(players[a], "spk %s", AUDIOarctic[i])
	}
	
	else if (equal(model, "gign")) 
	{
        client_cmd(players[a], "spk %s", AUDIOgign[i])
	}
	
	else if (equal(model, "gsg9")) 
	{
        client_cmd(players[a], "spk %s", AUDIOgsg9[i])
	}
	
	else if (equal(model, "guerilla")) 
	{
        client_cmd(players[a], "spk %s", AUDIOguerilla[i])
	}
	
	else if (equal(model, "leet")) 
	{
        client_cmd(players[a], "spk %s", AUDIOleet[i])
	}
	
	else if (equal(model, "sas")) 
	{
        client_cmd(players[a], "spk %s", AUDIOsas[i])
	}
	
	else if (equal(model, "terror")) 
	{
        client_cmd(players[a], "spk %s", AUDIOterror[i])
	}
	
	else if (equal(model, "urban")) 
	{
        client_cmd(players[a], "spk %s", AUDIOurban[i])
	}
	}
	}
}
return PLUGIN_HANDLED
}