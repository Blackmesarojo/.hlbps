#include <amxmodx>
#include <engine>

new const pl_cm_class[] = "PlayerCamera";
new bool:cmra[32];
new cam_chat;
new Float:camZ[32];
new CROSSHAIR_ENABLED[32] = { 1, ... };
new gmsgHideWeapon;

public plugin_init() {
    register_plugin("Wisetone's Camera Menu", "2.0", "Wisetone");
    register_clcmd("say /cam", "camMenu");
    register_think(pl_cm_class, "Think_PlayerCamera");
    cam_chat = register_cvar("amx_camchatpublic_enable", "0");
    gmsgHideWeapon = get_user_msgid("HideWeapon");
    for (new i = 1; i <= 32; i++) {
        camZ[i] = 100.0;
    }
    // server_print("[Camera Menu Plugin] Wisetone"); // Commented out for now.
}

public cmdCam(id) {
    if (get_pcvar_num(cam_chat)) {
        Create_PlayerCamera(id);
        return PLUGIN_CONTINUE;
    } else {
        Create_PlayerCamera(id);
        return PLUGIN_HANDLED;
    }
    return PLUGIN_HANDLED;
}

Create_PlayerCamera(id) {
    if (!is_user_alive(id)) {
        return;
    }

    if (!cmra[id]) {
        new ent = -1;
        while ((ent = find_ent_by_class(ent, pl_cm_class)) != 0) {
            if (entity_get_edict(ent, EV_ENT_owner) == id) {
                attach_view(id, ent);
                return;
            }
        }
        ent = create_entity("info_target");

        if (!ent)
            return;

        entity_set_string(ent, EV_SZ_classname, pl_cm_class);
        entity_set_model(ent, "models/w_usp.mdl");
        entity_set_byte(ent, EV_INT_solid, SOLID_TRIGGER);
        entity_set_int(ent, EV_INT_movetype, MOVETYPE_FLYMISSILE);
        entity_set_edict(ent, EV_ENT_owner, id);
        entity_set_int(ent, EV_INT_rendermode, kRenderTransTexture);
        entity_set_float(ent, EV_FL_renderamt, 0.0);

        attach_view(id, ent);
        entity_set_float(ent, EV_FL_nextthink, get_gametime());
        cmra[id] = true;
        weapon_change(id);
    } else {
        attach_view(id, id);
        cmra[id] = false;
        show_crosshair(id);
    }
}

public Think_PlayerCamera(ent) {
    static owner;
    owner = entity_get_edict(ent, EV_ENT_owner);

    if (!cmra[owner] || !is_user_alive(owner)) {
        attach_view(owner, owner);
        show_crosshair(owner);
        remove_entity(ent);
        return PLUGIN_CONTINUE;
    }

    static Float: origin[3], Float: fAngle[3], Float: origin2[3];
    entity_get_vector(owner, EV_VEC_origin, origin);
    entity_get_vector(owner, EV_VEC_v_angle, fAngle);

    origin2[0] = origin[0];
    origin2[1] = origin[1];
    origin2[2] = origin[2];

    static Float: fVBack[3];
    angle_vector(fAngle, ANGLEVECTOR_FORWARD, fVBack);

    origin[2] += 20.0;

    origin[0] += (-fVBack[0] * camZ[owner]);
    origin[1] += (-fVBack[1] * camZ[owner]);
    origin[2] += (-fVBack[2] * camZ[owner]);

    trace_line(owner, origin2, origin, origin);

    entity_set_vector(ent, EV_VEC_origin, origin);
    entity_get_vector(owner, EV_VEC_velocity, origin2);
    entity_set_vector(ent, EV_VEC_velocity, origin2);
    entity_set_vector(ent, EV_VEC_angles, fAngle);

    entity_set_float(ent, EV_FL_nextthink, get_gametime());

    return PLUGIN_CONTINUE;
}

public camMenu(id) {
    new menu = menu_create("\r[Wisetone's] \yCamera Menu", "menuHandler");
    menu_additem(menu, "\y1st/3rd Person");
    menu_additem(menu, "\yZoom In");
    menu_additem(menu, "\yZoom Out");
    menu_additem(menu, "\yRemove/Show Crosshair \r(3rd Person Only)");
    menu_additem(menu, "\yReset");
    menu_display(id, menu, 0);
    return PLUGIN_HANDLED;
}

public menuHandler(id, menu, item) {
    if (item == -1) return PLUGIN_HANDLED;

    if (item == 0) {
        Create_PlayerCamera(id);
        menu_display(id, menu, 0);
    } else if (item == 1) {
        if (cmra[id]) {
            camZ[id] -= 10.0;
            if (camZ[id] < 10.0) {
                camZ[id] = 10.0;
            }
        }
        menu_display(id, menu, 0);
    } else if (item == 2) {
        if (cmra[id]) {
            camZ[id] += 10.0;
        }
        menu_display(id, menu, 0);
    } else if (item == 3) {
        if (cmra[id]) {
            CROSSHAIR_ENABLED[id] = 1 - CROSSHAIR_ENABLED[id];
            weapon_change(id);
        }
        menu_display(id, menu, 0);
    } else if (item == 4) {
        if (cmra[id]) {
            camZ[id] = 100.0;
            CROSSHAIR_ENABLED[id] = 1;
            weapon_change(id);
        }
        menu_display(id, menu, 0);
    }

    return PLUGIN_HANDLED;
}

public weapon_change(id) {
    if (cmra[id]) {
        if (CROSSHAIR_ENABLED[id]) {
            show_crosshair(id);
        } else {
            hide_crosshair(id);
        }
    }
}

public show_crosshair(id) {
    message_begin(MSG_ONE_UNRELIABLE, gmsgHideWeapon, _, id);
    write_byte(0);
    message_end();
}

public hide_crosshair(id) {
    message_begin(MSG_ONE_UNRELIABLE, gmsgHideWeapon, _, id);
    write_byte(1 << 6);
    message_end();
}